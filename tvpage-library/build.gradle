apply plugin: 'com.android.library'

android {
    compileSdkVersion 25

    defaultConfig {
        //applicationId = "com.tvpage.lib.tvpage-lib"
        minSdkVersion 17
        targetSdkVersion 25
        //versionCode rootProject.ext.gitCommitCount
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            versionNameSuffix = ".${rootProject.ext.gitCommitCount}"
        }
        debug {
            versionNameSuffix = ".${rootProject.ext.gitCommitCount}-Snapshot"
        }
    }

}

repositories {
    maven { url "https://jitpack.io" }
    mavenCentral()
    jcenter()
    google()
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api 'com.android.support:appcompat-v7:25.3.1'
    api 'com.github.HaarigerHarald:android-youtubeExtractor:v1.6.0'
    api 'com.github.ed-george:AndroidVimeoExtractor:v1.1.1'
    //Glide
    api 'com.github.bumptech.glide:glide:3.7.0'
    //Glide transformation
    api 'jp.wasabeef:glide-transformations:2.0.1'
    api 'com.squareup.okhttp3:okhttp:3.6.0'
    api 'com.squareup.okhttp3:logging-interceptor:3.6.0'
    api 'com.minimize.library:seekbar-compat:0.2.5'
    api 'com.android.support:recyclerview-v7:25.3.1'
    api 'com.devbrackets.android:exomedia:4.0.0-preview4'
}

afterEvaluate {
    apply plugin: 'maven-publish'

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        //classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        android.libraryVariants.all { variant ->
            //if (variant.name == 'release') {
                owner.classpath += variant.javaCompiler.classpath
            //}
        }
        //options('bootclasspath')
        //bootClasspath = files(android.getBootClasspath()).asType(List)
        //destinationDir = file("../javadoc/")
        //exclude '**/R.html', '**/R.*.html', '**/R.java'
        //classpath = files(javaCompiler.classpath.files) + getAndroidPrebuilt(android.compileSdkVersion)
        destinationDir = file("../javadoc/")
        options.encoding = "UTF-8"
        options.addStringOption('bootclasspath', android.getBootClasspath().join(File.pathSeparator))

        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    publishing {
        publications {
            mavenAar(MavenPublication) {
                groupId 'com.tvpage.lib'
                artifactId 'tvpage-library'
                version = "${android.defaultConfig.versionName}.${rootProject.ext.gitCommitCount}"

                artifact bundleRelease
                artifact androidJavadocsJar
                artifact androidSourcesJar

                pom.withXml {
                    asNode().appendNode('description', 'Android SDK library for integration of TVPage experience into android applications')
                    //description = gradleProject.description
                    asNode().appendNode('url', 'https://github.com/tvpage/sdk-android')

                    final dependenciesNode = asNode().appendNode('dependencies')

                    ext.addDependency = { Dependency dep, String scope ->
                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                            return // ignore invalid dependencies

                        final dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('artifactId', dep.name)
                        dependencyNode.appendNode('version', dep.version)
                        dependencyNode.appendNode('scope', scope)

                        if (!dep.transitive) {
                            // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            exclusionNode.appendNode('groupId', '*')
                            exclusionNode.appendNode('artifactId', '*')
                        } else if (!dep.properties.excludeRules.empty) {
                            // Otherwise add specified exclude rules
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            dep.properties.excludeRules.each { ExcludeRule rule ->
                                exclusionNode.appendNode('groupId', rule.group ?: '*')
                                exclusionNode.appendNode('artifactId', rule.module ?: '*')
                            }
                        }
                    }

                    // List all "compile" dependencies (for old Gradle)
                    configurations.compile.getAllDependencies().each { dep -> addDependency(dep, "compile") }
                    // List all "api" dependencies (for new Gradle) as "compile" dependencies
                    configurations.api.getAllDependencies().each { dep -> addDependency(dep, "compile") }
                    // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
                    configurations.implementation.getAllDependencies().each { dep -> addDependency(dep, "runtime") }
                }
            }
        }
        repositories {
            maven {
                url "$buildDir/repo"
            }
        }
    }
}